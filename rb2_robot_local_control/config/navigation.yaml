type: robot_local_control_components/NavigationComponent
desired_freq: 1.0

check_sensors_state: false
check_localization_state: true
has_safety_laser: false
safety_laser_mode_allowed: safe
charge_disable_procedures: true
uncharge_procedure_name: UnchargeComponent

#components: [GoToComponent, ChargeComponent, UnchargeComponent, MoveComponent]
components:
 - GoToComponent
 - MoveComponent
 - ChargeComponent
 - UnchargeComponent
 - PickComponent
 - PlaceComponent

GoToComponent:
  type: robot_local_control_procedures/GoToMoveBase
  desired_freq: 5.0
  action_namespace: move_base
  global_frame: robot_map
  base_frame: robot_base_footprint
  default_yaw_tolerance: 0.1 # when goal has orientation. if orientation is invalid, goal tolerance is changed to 3.14
  has_safety_laser: false
  yaw_tolerance: 0.1
  xy_tolerance: 0.15
  preemptable: false
  clear_costmaps_before_send_goal: false
  local_planner_namespace: TebLocalPlannerROS

MoveComponent:
  type: robot_local_control_procedures/Move
  desired_freq: 5.0
  action_namespace: move

ChargeComponent:
  type: robot_local_control_procedures/Charge
  desired_freq: 5.0
  has_laser_safety: false # determines if the robot has safety_lasers and the safety zone must be changed
  docker_namespace: pp_docker
  dock_frame: robot_docking_station
  generic_dock_frame: robot_docking_station_([0-9]+)
  laser_mode_at_begining: docking_station
  robot_dock_frame: robot_base_footprint
  dock_offset_x: -0.45 # 0.25 robot radius + 0.25 docking station reflector to contacts - 0.05 to mimic previous working config
  move_namespace: move
  step_in_distance: 0.06 # Indicates the distance that the robot is going to move in x-axis after the docking. If 0.0 then no move action is done
  set_laser_to_standby: false # If 'true' then the lasers will be in standby after the docking
  move:
    max_velocity:
      linear_x: 0.015
      linear_y: 0.015
      angular_z: 0.1
  dock:
    max_velocity:
      linear_x: 0.1
      linear_y: 0.1
      angular_z: 0.1

UnchargeComponent:
  type: robot_local_control_procedures/Uncharge
  desired_freq: 5.0
  has_laser_safety: false # determines if the robot has safety_lasers and the safety zone must be changed
  move_namespace: move
  laser_mode_at_finish: standard
  step_back_distance: 0.35 # Indicates the distance that the robot is going to move backwards. If 0.0 then no rotation action is done
  rotation: 0.0 # Indicates the rotation that the robot is going to move after moving backwards. If 0.0 then no rotation action is done
  move:
    max_velocity:
      linear_x: 0.025
      linear_y: 0.025
      angular_z: 0.1

PickComponent:
  type: robot_local_control_procedures/Pick
  desired_freq: 1.0
  has_laser_safety: false
  step_in_distance: 0.0
  dock_offset_x: 0.0
  dock_frame: robot_cart
  generic_dock_frame: robot_cart_([0-9]+)
  robot_dock_frame: robot_base_footprint
  docker_namespace: pp_docker
  docker_state_topic: pp_docker/state
  move_namespace: move
  move_state_topic: move/state
  action_namespace: move_base
  elevator_namespace: robotnik_base_control/set_elevator
  elevator_status_topic: robotnik_base_control/elevator_status
  elevator_up_footprint: '[[0.5,-0.46],[0.5,0.46],[-0.5,0.46],[-0.5,-0.46]]'
  laser_safety_mode_dock: docking_cart
  laser_safety_mode_raised: cart
  set_dynamic_footprint: true

PlaceComponent:
  type: robot_local_control_procedures/Place
  desired_freq: 1.0
  has_laser_safety: false
  step_out_distance: 0.0
  move_namespace: move
  move_state_topic: move/state
  action_namespace: move_base
  elevator_namespace: robotnik_base_control/set_elevator
  elevator_status_topic: robotnik_base_control/elevator_status
  elevator_down_footprint: '[[0.5,-0.3],[0.5,0.3],[-0.5,0.3],[-0.5,-0.3]]'
  set_dynamic_footprint: true
  laser_safety_mode_dock: docking_cart
  laser_safety_mode_standard: standard
  turnabout_under_trolley: true
  # rotation: 3.14
